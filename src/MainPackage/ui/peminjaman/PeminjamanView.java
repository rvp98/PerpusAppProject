/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage.ui.peminjaman;

import MainPackage.Constant;
import MainPackage.Factory.ViewContract;
import MainPackage.ui.anggota.entity.Anggota;
import MainPackage.ui.anggota.repository.AnggotaRepository;
import MainPackage.ui.buku.entity.Buku;
import MainPackage.ui.buku.repository.BukuRepository;
import MainPackage.ui.peminjaman.entity.Peminjaman;
import MainPackage.ui.peminjaman.repository.PeminjamanRepository;
import MainPackage.util.SessionHelper;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author praset
 */
public class PeminjamanView extends javax.swing.JPanel implements ViewContract<Peminjaman>{

    private Peminjaman selectedPeminjaman;
    private PeminjamanRepository repoPeminjaman;
    private BukuRepository repoBuku;
    private AnggotaRepository repoAnggota;
    
    /**
     * Creates new form PeminjamanViewNew
     * @param repoPeminjaman
     * @param repoBuku
     * @param repoAnggota
     */
   public PeminjamanView(
            PeminjamanRepository repoPeminjaman, 
            BukuRepository repoBuku, 
            AnggotaRepository repoAnggota
    ) {
        initComponents();
        this.repoPeminjaman = repoPeminjaman;
        this.repoBuku = repoBuku;
        this.repoAnggota = repoAnggota;
        setDataTable();
        setBookCombobox();
        setAnggotaCombobox();
        clearData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbxBuku = new javax.swing.JComboBox<>();
        cbxPeminjam = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeminjaman = new javax.swing.JTable();
        btnPinjam = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        datePickPinjam = new com.toedter.calendar.JDateChooser();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Peminjaman");

        jLabel2.setText("Buku");

        jLabel3.setText("Peminjam");

        tblPeminjaman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPeminjaman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPeminjamanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPeminjaman);

        btnPinjam.setText("Pinjam");
        btnPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPinjamActionPerformed(evt);
            }
        });

        buttonClear.setText("Reset");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        jLabel4.setText("Tanggal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbxBuku, 0, 250, Short.MAX_VALUE)
                            .addComponent(cbxPeminjam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(datePickPinjam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPinjam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUbah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPinjam)
                    .addComponent(buttonClear))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbxPeminjam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUbah)
                            .addComponent(btnHapus))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(datePickPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPinjamActionPerformed
        if(validateData()) {
            Peminjaman peminjaman = generateData();
            repoPeminjaman.insert(peminjaman);
            setDataTable();
            clearData();
        }
    }//GEN-LAST:event_btnPinjamActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        clearData();
        changeCondition(Constant.CurrState.create);
    }//GEN-LAST:event_buttonClearActionPerformed

    private void tblPeminjamanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeminjamanMouseClicked
       Peminjaman peminjaman = this.repoPeminjaman.get(tblPeminjaman.getValueAt(tblPeminjaman.getSelectedRow(), 0).toString());
       this.selectedPeminjaman = peminjaman;
       Date datePinjam;
        try {
            datePinjam = new SimpleDateFormat(Constant.defaultDateFormat).parse(peminjaman.getTanggalPinjam());
            datePickPinjam.setDate(datePinjam);
        } catch (ParseException ex) {
            Logger.getLogger(PeminjamanView.class.getName()).log(Level.SEVERE, null, ex);
        }
       setSelectedAnggota(peminjaman.getAnggota().getIdAnggota());
       setSelectedBuku(peminjaman.getBuku().getIdBuku());
       changeCondition(Constant.CurrState.update);
    }//GEN-LAST:event_tblPeminjamanMouseClicked

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        if(validateData()) {
            Peminjaman peminjaman = generateData();
            repoPeminjaman.update(peminjaman, selectedPeminjaman.getPrimaryKey());
            setDataTable();
            changeCondition(Constant.CurrState.create);
        }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        repoPeminjaman.delete(selectedPeminjaman.getPrimaryKey());
        setDataTable();
        changeCondition(Constant.CurrState.create);
    }//GEN-LAST:event_btnHapusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnPinjam;
    private javax.swing.JButton btnUbah;
    private javax.swing.JButton buttonClear;
    private javax.swing.JComboBox<Object> cbxBuku;
    private javax.swing.JComboBox<Object> cbxPeminjam;
    private com.toedter.calendar.JDateChooser datePickPinjam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPeminjaman;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setDataTable() {
        DefaultTableModel tableModel = generateDefaultTableModel();
        try {
            ArrayList<Peminjaman> listPeminjaman = repoPeminjaman.get();
            listPeminjaman.forEach(peminjaman -> {
                tableModel.addRow(new Object[]{
                    peminjaman.getIdPeminjaman(),
                    peminjaman.getTanggalPinjam(),
                    peminjaman.getTanggalKembali(),
                    peminjaman.getBuku().getKodeBuku(),
                    peminjaman.getBuku().getJudulBuku(),
                    peminjaman.getAnggota().getIdAnggota(),
                    peminjaman.getAnggota().getNamaAnggota(),
                    peminjaman.getPetugas().getIdPetugas(),
                    peminjaman.getPetugas().getNamaPetugas()
                });
            });
        } catch (Exception e) {
            System.out.println("error when get data peminjaman");
            System.out.println(e.getLocalizedMessage());
        }
        tblPeminjaman.setModel(tableModel);
    }

    @Override
    public DefaultTableModel generateDefaultTableModel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Tanggal Pinjam");
        model.addColumn("Tanggal Kembali");
        model.addColumn("Id Buku");
        model.addColumn("Judul Buku");
        model.addColumn("Id Peminjam");
        model.addColumn("Nama Peminjam");
        model.addColumn("Id Petugas");
        model.addColumn("Nama Petugas");
        return model;
    }

    @Override
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    @Override
    public void changeCondition(Constant.CurrState state) {
        switch(state) {
            case create :
                btnUbah.setEnabled(false);
                btnHapus.setEnabled(false);
                btnPinjam.setEnabled(true);
                clearData();
                setDataTable();
                break;
            case update :
                btnUbah.setEnabled(true);
                btnHapus.setEnabled(true);
                btnPinjam.setEnabled(false);
                break;
        }
    }

    @Override
    public void clearData() {
        cbxBuku.setSelectedIndex(-1);
        cbxPeminjam.setSelectedIndex(-1);
        datePickPinjam.setDate(new Date());
    }

    @Override
    public Peminjaman generateData() {
        int idPeminjaman = 0;
        if (selectedPeminjaman != null) {
            idPeminjaman = selectedPeminjaman.getIdPeminjaman();
        }
        SimpleDateFormat formater = new SimpleDateFormat(Constant.defaultDateFormat);
        String datePinjam = formater.format(datePickPinjam.getDate());
        return new Peminjaman(
            idPeminjaman,
            datePinjam,
            null,
            (Buku) cbxBuku.getSelectedItem(),
            (Anggota) cbxPeminjam.getSelectedItem(),
            SessionHelper.sessionPetugas
        );
    }

    @Override
    public boolean validateData() {
        boolean isValid = false;
        if (cbxBuku.getSelectedItem() == null) {
            showMessage("Masih belum ada data buku, mohon pilih buku atau tambahkan buku baru");
        } else if (cbxPeminjam.getSelectedItem() == null) {
            showMessage("Masih belum ada data peminjam, mohon pilih anggota peminjam atau tambahkan data peminjam dahulu");
        } else if (datePickPinjam.getDateFormatString().isEmpty()) {
            showMessage("Mohon memilih tanggal peminjaman terlebih dahulu");
        } else {
            isValid = true;
        }
        return isValid;
    }
    
    private void setBookCombobox() {
        try {
            cbxBuku.removeAllItems();
            repoBuku.get().forEach(cbxBuku::addItem);
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
    }
    
    private void setAnggotaCombobox() {
        try {
            cbxPeminjam.removeAllItems();
            repoAnggota.get().forEach(cbxPeminjam::addItem);
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
    }
    
    private void setSelectedBuku(int idBuku) {
        for(int i = 0; i < cbxBuku.getItemCount(); i++) {
            Buku buku = (Buku) cbxBuku.getItemAt(i);
            if(buku.getIdBuku()== idBuku) {
                cbxBuku.setSelectedIndex(i);
                break;
            }
        }
    }
    
    private void setSelectedAnggota(int idAnggota) {
        for(int i = 0; i < cbxPeminjam.getItemCount(); i++) {
            Anggota anggota = (Anggota) cbxPeminjam.getItemAt(i);
            if(anggota.getIdAnggota()== idAnggota) {
                cbxPeminjam.setSelectedIndex(i);
                break;
            }
        }
    }
}
